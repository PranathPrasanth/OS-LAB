#include <stdio.h>
#include <stdlib.h>

typedef struct Block{
    int size,remaining;
    struct Block* next;
}Block;

typedef struct Process{
    int size;
}Process;

Block* createBlock(int size){
    Block* newBlock = (Block*)malloc(sizeof(Block));
    newBlock->size = newBlock->remaining = size;
    newBlock->next = NULL;
    return newBlock;
}

void bestFit(Block* blocks,Process* processes,int processCount){
    printf("Best-Fit Algorithm\n ------------------------ \n");
    printf("|   Process     |   Size     |   Block     |   Free     |\n ---------------------------------------\n");
    
    for(int i=0;i<processCount;i++){
        Block* bestBlock=NULL,*current = blocks;
        while(current){
            if(current->remaining>=processes[i].size && (!bestBlock || current->remaining < bestBlock->remaining)){
                bestBlock = current;
            }current = current->next;
        }
        if(bestBlock){
            printf("|   %2d     |   %3d     |   %3d     |   %3d     |\n",i+1,processes[i].size,bestBlock->size,bestBlock->remaining-processes[i].size);
            bestBlock->remaining-=processes[i].size;
        }
        else{
            printf("|   %2d     |   %3d     |   N/A     |   N/A     |\n",i+1,processes[i].size);
        }printf("--------------------------------------------\n");
    }
}

int main(){
    int blockCount,processCount,size;
    Block *blocks=NULL,*tail=NULL;
    printf("Enter no of blocks : ");
    scanf("%d",&blockCount);
    for(int i=0;i<blockCount;i++){
        printf("enter block %d size: ",i+1);
        scanf("%d",&size);
        Block* newBlock=createBlock(size);
        if(!blocks){
            blocks=newBlock;
            tail=newBlock;
        }
        else{
            tail->next=newBlock;
            tail=newBlock;
        }
    }
    
    printf("enter no of processes : ");
    scanf("%d",&processCount);
    Process* processes = (Process*)malloc(processCount * sizeof(Process));
    for(int i=0;i<processCount;i++){
        printf("Enter process %d size : ",i+1);
        scanf("%d",&processes[i].size);
    }
    
    bestFit(blocks,processes,processCount);
    return 0;
    
}
